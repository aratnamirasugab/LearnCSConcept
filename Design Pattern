Design pattern adalah sebuah design yang diperuntukkan supaya code yang kita buat terhindar dari kesalahan pada mendesign.
Design Pattern menjelaskan masalahnya, solusinya, kapan kita perlu implementasi pattern tsb dan konsekuensi dari pattern tsb.
By using the design patterns you can make your code more flexible, reusable and maintainable.

Ada beberapa tipe design pattern yaitu :
a. Creational
Pada creational design pattern, lebih ditekankan pada pembuatan instansiasi class atau pembutan object.
Biasanya kalau class, cara menginstansiasi itu dengan inheritance sedangkan pada object dengan delegasi
Creational design patterns are : the Factory Method, Abstract Factory, Builder, Singleton, Object Pool, and Prototype.

b. Structural
Pada structural design pattern, inti dari pattern ini adalah bagaimana caranya menggabungkan class dan objek yang berbeda menjadi struktur
yang lebih besar dan mencetuskan fitur yang baru.
Structural design patterns are : Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Private Class Data, and Proxy.

c. Behavioral
Pada behavioral design pattern, intinya komunikasi class antar objek, jenis ini lebih concern kepada komunikasi antar objek.
Behavioral patterns are : Chain of responsibility, Command, Interpreter, Iterator, Mediator, Memento, Null Object, Observer,
State, Strategy, Template method, Visitor


There are several design pattern :
Abstract Factory
Prototype
Adapter
Composite
Decorator
Observer
Strategy
Builder


1. Strategy :
Menekankan pada prinsip bahwa sebuah class bisa mengimplement beberapa interface untuk nantinya di aplikasikan kepada client.
Contoh : bubbleSort dan quickSort, dalam file kecil client implement bubbleSort namun pada saat file besar, quickSort lebih bermanfaat.

Di UML :
Class client akan meng-implement satu atau lebih interface, trus si interface juga bisa di extends oleh beberapa interface.

"A Strategy defines a set of algorithms that can be used interchangeably."
"In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables 
an algorithm's behavior to be selected at runtime."


2. Observer : 
contoh : chat room

Real world example :
A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching 
job opportunity.

In plain words : 
Defines a dependency between objects so that whenever an object changes its state, all its dependents are notified.

Wikipedia says : 
The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, 
called observers, and notifies them automatically of any state changes, usually by calling one of their methods.


3. Decorator : => Nambahin responsibility atau pretelan baru secara dinamik

Real world example : 	
Imagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? 
You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. 
Here each type of service is a decorator.

In plain words : 
Decorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a decorator class.

Wikipedia says : 
In object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, 
either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful 
for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.

Misal : 
buat interface coffee dengan method getCost() dan getDescription(), trus buat class SimpleCoffee yang meng-implement interface coffee, 
lalu didalam class SimpleCoffee ada constructor, method getCost() return 10 dan getDescription() return simple coffee sebagai string,
trus ada class lain, mis : MilkyCoffee, StrawberryCoffee, ChocoCoffee, nah masing2 class tsb memiliki constsructor, getCost(), getDescription(),
bedanya adalah pada SimpleCoffee kita getCost return 10, tetapi pada MilkyCoffee kita tambahain return 10+2 misalnya. Dan StrawberryCoffee,
serta ChocoCoffee yang dimana getCost-nya mereturn 10+ apa gitu angka.
Jadi initinya pada decorator, kita bisa menspesifikasikan custom attribute yang ingin kita masukkan.

pada code : 
$someCoffee = new SimpleCoffee();
echo $someCoffee->getCost(); // 10
echo $someCoffee->getDescription(); // Simple Coffee

$someCoffee = new MilkCoffee($someCoffee);
echo $someCoffee->getCost(); // 12
echo $someCoffee->getDescription(); // Simple Coffee, milk

$someCoffee = new WhipCoffee($someCoffee);
echo $someCoffee->getCost(); // 17
echo $someCoffee->getDescription(); // Simple Coffee, milk, whip

$someCoffee = new VanillaCoffee($someCoffee);
echo $someCoffee->getCost(); // 20
echo $someCoffee->getDescription(); // Simple Coffee, milk, whip, vanilla


4. Factory Methods : => Hiring manager trus setiap tahap pada interview itu di assign ke beda2 role interviewer.

Real world example
Consider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, 
she has to decide and delegate the interview steps to different people.

In plain words
It provides a way to delegate the instantiation logic to child classes.

Wikipedia says
In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of 
creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling 
a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden 
by derived classes—rather than by calling a constructor. 

5. Abstract Factory Methods : 

Real world example :
Extending our door example from Simple Factory. Based on your needs you might get a wooden door from a wooden door shop, iron door from an 
iron shop or a PVC door from the relevant shop. Plus you might need a guy with different kind of specialities to fit the door, for example 
a carpenter for wooden door, welder for iron door etc. As you can see there is a dependency between the doors now, wooden door needs carpenter,
iron door needs a welder etc.

In plain words :
A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.

Wikipedia says :
The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their 
concrete classes