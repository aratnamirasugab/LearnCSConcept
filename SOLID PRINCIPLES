SOLID Principle ada 5 :

"Following the SOLID Principles gives us many benefits, they make our system reusable, maintainable, scalable, testable and more."
Read more => http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod

SRP -> Single Responsibility Principle
OCP -> Open Close Principle 
LSP -> Liskov Substitution Principle
ISP -> Interface Segregation Principle
DIP -> Dependency Invesion Principle

Bagian 1 : Single Responsibility Principle
Slogan : "A class should have one, and only one, reason to change."
-Sebuah class harus mempunyai satu tanggungjawab. Jika sebuah class memiliki banyak tanggungjawab maka setiap ada perubahan
semakin banyak yang harus di ubah, malah akan mempersulit implementasi dari yang diubah tsb.
-Sebuah class jika terdapat potensial tanggungjawab baru maka harus di pecah tanggungjawab nya.

Bagian 2 : Open Close Principle
Slogan : "You should be able to extend a class without modifying it".
Why : "This principle is the foundation for building code that is maintainable and reusable."
Key Takeaways : 
-> The class should be open for extension : 
Ini untuk supaya sebuah class itu bisa di inherit, karena permintaan baru bermunculan jadi sebuah class yang lama harus bisa di inherit,
menyesuaikan dengan requirement yang baru.
-> The class should be closed for modification :
Class tidak boleh di modifikasi karena class bisa jadi sudah di inherit banyak subclass.
-> Kita pengennya methods dari base class jika diturunkan kedalam banyak class memiliki behaviour yang sama.

Gimana caranya buat achieve OCP ? 
=> Dengan cara abstraction. jadi misalnya jika ada class bernama lingkaran/persegi, maka supaya class nya itu memenuhi faedah,
Open Close Principle maka harus dibuat class yang umum, misalnya class/interface "bentuk" dimana attribut nya itu secara umum bisa di extend,
kepada subclass lingkaran/persegi.

Bagian 3 : Liskov Substitution Principle
Slogan : "Class turunan harus bisa diubah jika dijadikan sebagai base class?"
Penjelasan : Misalnya ada base class rectangle dimana terdapat pula sebuah subclass square, dua2 nya memiliki methods yang sama,
yaitu setWidth, setHeight. Yang jadi masalah adalah ketika diimplement, kedua class dipastikan memiliki behaviour yang sama tapi secara methods,
mereka sama. Untuk mengatasi masalah ini, Uncle Bob berkata kita harus memiliki preconditions dan postconditions untuk setiap class diatas.

Solutions nya adalah :
1. Assume your baseclass works with a member int. Now your subtype requires that int to be positive. 
This is strengthened pre-conditions, and now any code that worked perfectly fine before with negative ints is broken.
2. Likewise, assume the same scenario, but the base class used to guarantee that the member would be positive after being called. 
Then the subtype changes the behavior to allow negative ints. 
Code that works on the object (and assumes that the post-condition is a positive int) is now broken since the post-condition is not upheld.
// masih belum ngerti bagian Liskov Substitution Principle.

//another Liskov Substituion Principle Concept Explanation : 
Moral of the story: model your classes based on behaviours not on properties; 
model your data based on properties and not on behaviours. 
If it behaves like a duck, it's certainly a bird.

Well, a square clearly IS a type of rectangle in the real world. Whether we can model this in our code depends on the spec. 
What the LSP indicates is that subtype behavior should match base type behavior as defined in the base type specification. 
If the rectangle base type spec says that height and width can be set independently, 
then LSP says that square cannot be a subtype of rectangle. If the rectangle spec says that a rectangle is immutable, 
then a square can be a subtype of rectangle. It's all about subtypes maintaining the behavior specified for the base type.

The real issue here is that we are not modeling rectangles, but rather "reshapable rectangles," i.e., 
rectangles whose width or height can be modified after creation (and we still consider it to be the same object). 
If we look at the rectangle class in this way, it is clear that a square is not a "reshapable rectangle", 
because a square cannot be reshaped and still be a square (in general).

Bagian 4 : Interface Segregation Principle => Clients hanya mengimplement interface yang benar2 dipakai saja/dibutuhkan saja.
Slogan : "Make fine grained interfaces that are client specific. Clients should not be forced to implement interfaces they do not use."
Penjelasan : Lebih baik bikin interface yang banyak tapi rinci dan tertarget daripada satu interface besar tapi class yang pakai interface tsb,
malah menggunakan sedikit dari menthods pada interface yang besar itu.
-> Dengan kita memilih untuk membuat interface kecil2 secara tertarget berarti lebih baik menggunakan composition daripada inheritance,
dan Decoupling over Coupling.
-> Microservices banyak menggunkana konsep ini, karena setiap services memiliki responsibilitynya masing2.

Bagian 5 : Dependency Inversion Principle
Slogan : "Depend on abstractions, not on concretions.
A. High level modules should not depend upon low level modules. Both should depend upon abstractions.
B. Abstractions should not depend upon details. Details should depend upon abstractions."

Penjelasan : 
->Pada principle DIP, diminta bahwa jika kita mempunyai module katakanlah sebuah modul untuk authentikasi, maka kita biasanya,
membuat class untuk setiap service, misalnya GoogleAuthServices, GithubAuthService dll. cara diatas itu gak bagus, karena violasi OCP dimana,
setiap class itu turunan dari class authentication namun akhirnya di modifikasi methods2 nya sesuai dengan kebutuhan subclass(Google, github dll) terus dia cara ini juga menimbulkan technical debt, kalau misalnya service baru ingin di masukkan maka akan mengubah codenya dimana violasi OCP akan terjadi.
->Cara yang paling baik adalah dengan membuat abstract class "Authentication" / Interface trus diimplement ke setiap service. trus menggunakan Dependency Injection.
->By depending on higher-level abstractions, we can easily change one instance with another instance in order to change the behavior. Dependency Inversion increases the reusability and flexibility of our code.

